// Code generated by protoc-gen-go.
// source: addonly.proto
// DO NOT EDIT!

/*
Package addonly is a generated protocol buffer package.

It is generated from these files:
	addonly.proto

It has these top-level messages:
	BlankMessage
	AddRequest
	BooleanResponse
	IntResponse
	ContainsRequest
	AllResponse
*/
package set

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlankMessage struct {
	Time             *uint64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BlankMessage) Reset()         { *m = BlankMessage{} }
func (m *BlankMessage) String() string { return proto.CompactTextString(m) }
func (*BlankMessage) ProtoMessage()    {}

func (m *BlankMessage) GetTime() uint64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type AddRequest struct {
	Val              *string `protobuf:"bytes,1,req,name=val" json:"val,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}

func (m *AddRequest) GetVal() string {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return ""
}

type BooleanResponse struct {
	Resp             *bool  `protobuf:"varint,1,req,name=resp" json:"resp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BooleanResponse) Reset()         { *m = BooleanResponse{} }
func (m *BooleanResponse) String() string { return proto.CompactTextString(m) }
func (*BooleanResponse) ProtoMessage()    {}

func (m *BooleanResponse) GetResp() bool {
	if m != nil && m.Resp != nil {
		return *m.Resp
	}
	return false
}

type IntResponse struct {
	Resp             *uint64 `protobuf:"varint,1,req,name=resp" json:"resp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IntResponse) Reset()         { *m = IntResponse{} }
func (m *IntResponse) String() string { return proto.CompactTextString(m) }
func (*IntResponse) ProtoMessage()    {}

func (m *IntResponse) GetResp() uint64 {
	if m != nil && m.Resp != nil {
		return *m.Resp
	}
	return 0
}

type ContainsRequest struct {
	Val              *string `protobuf:"bytes,1,req,name=val" json:"val,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainsRequest) Reset()         { *m = ContainsRequest{} }
func (m *ContainsRequest) String() string { return proto.CompactTextString(m) }
func (*ContainsRequest) ProtoMessage()    {}

func (m *ContainsRequest) GetVal() string {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return ""
}

type AllResponse struct {
	Val              []string `protobuf:"bytes,1,rep,name=val" json:"val,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AllResponse) Reset()         { *m = AllResponse{} }
func (m *AllResponse) String() string { return proto.CompactTextString(m) }
func (*AllResponse) ProtoMessage()    {}

func (m *AllResponse) GetVal() []string {
	if m != nil {
		return m.Val
	}
	return nil
}

func init() {
	proto.RegisterType((*BlankMessage)(nil), "addonly.BlankMessage")
	proto.RegisterType((*AddRequest)(nil), "addonly.AddRequest")
	proto.RegisterType((*BooleanResponse)(nil), "addonly.BooleanResponse")
	proto.RegisterType((*IntResponse)(nil), "addonly.IntResponse")
	proto.RegisterType((*ContainsRequest)(nil), "addonly.ContainsRequest")
	proto.RegisterType((*AllResponse)(nil), "addonly.AllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AddOnly service

type AddOnlyClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	Size(ctx context.Context, in *BlankMessage, opts ...grpc.CallOption) (*IntResponse, error)
	Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	All(ctx context.Context, in *BlankMessage, opts ...grpc.CallOption) (*AllResponse, error)
}

type addOnlyClient struct {
	cc *grpc.ClientConn
}

func NewAddOnlyClient(cc *grpc.ClientConn) AddOnlyClient {
	return &addOnlyClient{cc}
}

func (c *addOnlyClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := grpc.Invoke(ctx, "/addonly.AddOnly/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlyClient) Size(ctx context.Context, in *BlankMessage, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := grpc.Invoke(ctx, "/addonly.AddOnly/Size", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlyClient) Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := grpc.Invoke(ctx, "/addonly.AddOnly/Contains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlyClient) All(ctx context.Context, in *BlankMessage, opts ...grpc.CallOption) (*AllResponse, error) {
	out := new(AllResponse)
	err := grpc.Invoke(ctx, "/addonly.AddOnly/All", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AddOnly service

type AddOnlyServer interface {
	Add(context.Context, *AddRequest) (*BooleanResponse, error)
	Size(context.Context, *BlankMessage) (*IntResponse, error)
	Contains(context.Context, *ContainsRequest) (*BooleanResponse, error)
	All(context.Context, *BlankMessage) (*AllResponse, error)
}

func RegisterAddOnlyServer(s *grpc.Server, srv AddOnlyServer) {
	s.RegisterService(&_AddOnly_serviceDesc, srv)
}

func _AddOnly_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlyServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnly_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BlankMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlyServer).Size(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnly_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlyServer).Contains(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnly_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BlankMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlyServer).All(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AddOnly_serviceDesc = grpc.ServiceDesc{
	ServiceName: "addonly.AddOnly",
	HandlerType: (*AddOnlyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AddOnly_Add_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _AddOnly_Size_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _AddOnly_Contains_Handler,
		},
		{
			MethodName: "All",
			Handler:    _AddOnly_All_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
